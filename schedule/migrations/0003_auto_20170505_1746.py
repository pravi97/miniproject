# -*- coding: utf-8 -*-
# Generated by Django 1.10 on 2017-05-05 17:46
from __future__ import unicode_literals

import datetime
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import schedule.models


class Migration(migrations.Migration):

    dependencies = [
        ('sis', '0006_auto_20170505_1738'),
        ('schedule', '0002_daysoff_period'),
    ]

    operations = [
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('fullname', models.CharField(max_length=255, unique=True, verbose_name='Full Course Name')),
                ('shortname', models.CharField(max_length=255, verbose_name='Short Name')),
                ('homeroom', models.BooleanField(default=False, help_text='Homerooms can be used for attendance')),
                ('graded', models.BooleanField(default=True, help_text='Teachers can submit grades for this course')),
                ('description', models.TextField(blank=True)),
                ('credits', models.DecimalField(decimal_places=2, default='', help_text='Credits affect GPA.', max_digits=5)),
            ],
        ),
        migrations.CreateModel(
            name='CourseEnrollment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attendance_note', models.CharField(blank=True, help_text='This note will appear when taking attendance.', max_length=255)),
                ('exclude_days', models.CharField(blank=True, help_text='Student does not need to attend on this day. Note course sections already specify meeting days; this field is for students who have a special reason to be away.', max_length=100)),
                ('is_active', models.BooleanField(default=True)),
                ('cached_grade', models.CharField(blank=True, editable=False, max_length=8, verbose_name='Final Course Section Grade')),
                ('grade_recalculation_needed', models.BooleanField(default=True)),
                ('cached_numeric_grade', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('numeric_grade_recalculation_needed', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='CourseMeet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day', models.CharField(choices=[('1', 'Monday'), ('2', 'Tuesday'), ('3', 'Wednesday'), ('4', 'Thursday'), ('5', 'Friday'), ('6', 'Saturday'), ('7', 'Sunday')], max_length=1)),
            ],
        ),
        migrations.CreateModel(
            name='CourseSection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('name', models.CharField(max_length=255)),
                ('last_grade_submission', models.DateTimeField(blank=True, editable=False, null=True, validators=[django.core.validators.MinValueValidator(datetime.date(1970, 1, 1))])),
                ('cohorts', models.ManyToManyField(blank=True, null=True, to='sis.Cohort')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sections', to='schedule.Course')),
                ('enrollments', models.ManyToManyField(blank=True, null=True, through='schedule.CourseEnrollment', to='sis.Student')),
                ('marking_period', models.ManyToManyField(blank=True, to='schedule.MarkingPeriod')),
                ('periods', models.ManyToManyField(blank=True, through='schedule.CourseMeet', to='schedule.Period')),
            ],
        ),
        migrations.CreateModel(
            name='CourseSectionTeacher',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_primary', models.BooleanField(default=False)),
                ('course_section', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='schedule.CourseSection')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sis.Faculty')),
            ],
        ),
        migrations.CreateModel(
            name='CourseType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('is_default', models.BooleanField(default=False, help_text='Only one course type can be the default.')),
                ('weight', models.DecimalField(decimal_places=2, default=1, help_text="A course's weight in average calculations is this value multiplied by the number of credits for the course. A course that does not affect averages should have a weight of 0, while an honors course might, for example, have a weight of 1.2.", max_digits=5)),
                ('award_credits', models.BooleanField(default=True, help_text="When disabled, course will not be included in any student's credit totals. However, the number of credits and weight will still be used when calculating averages.")),
                ('boost', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
            ],
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Department Name')),
                ('order_rank', models.IntegerField(blank=True, help_text='Rank that courses will show up in reports', null=True)),
            ],
            options={
                'ordering': ('order_rank', 'name'),
            },
        ),
        migrations.CreateModel(
            name='DepartmentGraduationCredits',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('credits', models.DecimalField(decimal_places=2, max_digits=5)),
                ('class_year', models.ForeignKey(help_text='Also applies to subsequent years unless a more recent requirement exists.', on_delete=django.db.models.deletion.CASCADE, to='sis.ClassYear')),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='schedule.Department')),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
        ),
        migrations.AddField(
            model_name='coursesection',
            name='teachers',
            field=models.ManyToManyField(blank=True, through='schedule.CourseSectionTeacher', to='sis.Faculty'),
        ),
        migrations.AddField(
            model_name='coursemeet',
            name='course_section',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='schedule.CourseSection'),
        ),
        migrations.AddField(
            model_name='coursemeet',
            name='location',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='schedule.Location'),
        ),
        migrations.AddField(
            model_name='coursemeet',
            name='period',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='schedule.Period'),
        ),
        migrations.AddField(
            model_name='courseenrollment',
            name='course_section',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='schedule.CourseSection'),
        ),
        migrations.AddField(
            model_name='courseenrollment',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sis.Student'),
        ),
        migrations.AddField(
            model_name='course',
            name='course_type',
            field=models.ForeignKey(default=schedule.models.get_course_type_default, help_text='Should only need adjustment when uncommon calculation methods are used.', on_delete=django.db.models.deletion.CASCADE, to='schedule.CourseType'),
        ),
        migrations.AddField(
            model_name='course',
            name='department',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='schedule.Department'),
        ),
        migrations.AddField(
            model_name='course',
            name='level',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='sis.GradeLevel', verbose_name='Grade Level'),
        ),
        migrations.AlterUniqueTogether(
            name='departmentgraduationcredits',
            unique_together=set([('department', 'class_year')]),
        ),
        migrations.AlterUniqueTogether(
            name='coursesectionteacher',
            unique_together=set([('teacher', 'course_section')]),
        ),
        migrations.AlterUniqueTogether(
            name='courseenrollment',
            unique_together=set([('course_section', 'user')]),
        ),
    ]
