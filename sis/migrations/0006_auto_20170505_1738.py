# -*- coding: utf-8 -*-
# Generated by Django 1.10 on 2017-05-05 17:38
from __future__ import unicode_literals

import ckeditor.fields
import custom_field.custom_field
import datetime
from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_thumbs.db.models
import phonenumber_field.modelfields
import sis.models


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
        ('sis', '0005_classyear_languagechoice'),
    ]

    operations = [
        migrations.CreateModel(
            name='Cohort',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('long_name', models.CharField(blank=True, help_text='Optional verbose name', max_length=500)),
                ('primary', models.BooleanField(default=False, help_text='If set true - all students in this cohort will have it set as primary!')),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='GradeScale',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='GradeScaleRule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('min_grade', models.DecimalField(decimal_places=2, max_digits=5)),
                ('max_grade', models.DecimalField(decimal_places=2, max_digits=5)),
                ('letter_grade', models.CharField(blank=True, max_length=50)),
                ('numeric_scale', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('grade_scale', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sis.GradeScale')),
            ],
        ),
        migrations.CreateModel(
            name='MessageToStudent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', ckeditor.fields.RichTextField(help_text='This message will be shown to students when they log in.')),
                ('start_date', models.DateField(default=datetime.date.today, validators=[django.core.validators.MinValueValidator(datetime.date(1970, 1, 1))])),
                ('end_date', models.DateField(default=datetime.date.today, validators=[django.core.validators.MinValueValidator(datetime.date(1970, 1, 1))])),
            ],
        ),
        migrations.CreateModel(
            name='ReasonLeft',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='SchoolYear',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('start_date', models.DateField(validators=[django.core.validators.MinValueValidator(datetime.date(1970, 1, 1))])),
                ('end_date', models.DateField(validators=[django.core.validators.MinValueValidator(datetime.date(1970, 1, 1))])),
                ('grad_date', models.DateField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(datetime.date(1970, 1, 1))])),
                ('active_year', models.BooleanField(default=False, help_text='DANGER!! This is the current school year. There can only be one and setting this will remove it from other years. If you want to change the active year you almost certainly want to click Management, Change School Year.')),
                ('benchmark_grade', models.BooleanField(default=sis.models.get_default_benchmark_grade, help_text='Causes additional information to appear on transcripts. The configuration option "Benchmark-based grading" sets the default for this field.')),
                ('grade_scale', models.ForeignKey(blank=True, help_text='Alternative grade scale such as letter grades or a 4.0 scale', null=True, on_delete=django.db.models.deletion.CASCADE, to='sis.GradeScale')),
            ],
            options={
                'ordering': ('-start_date',),
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('mname', models.CharField(blank=True, max_length=150, null=True, verbose_name='Middle Name')),
                ('grad_date', models.DateField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(datetime.date(1970, 1, 1))])),
                ('pic', django_thumbs.db.models.ImageWithThumbsField(blank=True, null=True, upload_to='student_pics')),
                ('alert', models.CharField(blank=True, help_text='Warn any user who accesses this record with this text', max_length=500)),
                ('sex', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female')], max_length=1, null=True)),
                ('bday', models.DateField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(datetime.date(1970, 1, 1))], verbose_name='Birth Date')),
                ('date_dismissed', models.DateField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(datetime.date(1970, 1, 1))])),
                ('unique_id', models.IntegerField(blank=True, help_text='For integration with outside databases', null=True, unique=True)),
                ('ssn', models.CharField(blank=True, max_length=11, null=True)),
                ('parent_guardian', models.CharField(blank=True, editable=False, max_length=150)),
                ('street', models.CharField(blank=True, editable=False, max_length=150)),
                ('state', models.CharField(blank=True, max_length=255)),
                ('city', models.CharField(blank=True, max_length=255)),
                ('zip', models.CharField(blank=True, editable=False, max_length=10)),
                ('parent_email', models.EmailField(blank=True, editable=False, max_length=254)),
                ('alt_email', models.EmailField(blank=True, help_text='Alternative student email that is not their school email.', max_length=254)),
                ('notes', models.TextField(blank=True)),
                ('individual_education_program', models.BooleanField(default=False)),
                ('cached_gpa', models.DecimalField(blank=True, decimal_places=2, editable=False, max_digits=5, null=True)),
                ('gpa_recalculation_needed', models.BooleanField(default=True)),
                ('cache_cohort', models.ForeignKey(blank=True, editable=False, help_text='Cached primary cohort.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='cache_cohorts', to='sis.Cohort')),
                ('class_of_year', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='sis.ClassYear', verbose_name='Graduating Class')),
            ],
            options={
                'ordering': ('last_name', 'first_name'),
                'permissions': (('view_student', 'View student'), ('view_ssn_student', 'View student ssn'), ('view_mentor_student', 'View mentoring information student'), ('reports', 'View reports')),
            },
            bases=('auth.user', custom_field.custom_field.CustomFieldModel),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='StudentCohort',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('primary', models.BooleanField(default=False)),
                ('cohort', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sis.Cohort')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sis.Student')),
            ],
        ),
        migrations.CreateModel(
            name='StudentFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='student_files')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sis.Student')),
            ],
        ),
        migrations.CreateModel(
            name='StudentHealthRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('record', models.TextField()),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sis.Student')),
            ],
        ),
        migrations.CreateModel(
            name='StudentNumber',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', phonenumber_field.modelfields.PhoneNumberField(max_length=128)),
                ('ext', models.CharField(blank=True, max_length=10, null=True)),
                ('type', models.CharField(blank=True, choices=[('H', 'Home'), ('C', 'Cell'), ('W', 'Work'), ('O', 'Other')], max_length=2)),
                ('note', models.CharField(blank=True, max_length=255)),
                ('student', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='sis.Student')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TranscriptNote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='TranscriptNoteChoices',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='FamilyAccessUser',
            fields=[
            ],
            options={
                'ordering': ('last_name', 'first_name'),
                'proxy': True,
            },
            bases=('auth.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='transcriptnote',
            name='predefined_note',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='sis.TranscriptNoteChoices'),
        ),
        migrations.AddField(
            model_name='transcriptnote',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sis.Student'),
        ),
        migrations.AddField(
            model_name='student',
            name='cohorts',
            field=models.ManyToManyField(blank=True, through='sis.StudentCohort', to='sis.Cohort'),
        ),
        migrations.AddField(
            model_name='student',
            name='emergency_contacts',
            field=models.ManyToManyField(blank=True, to='sis.EmergencyContact', verbose_name='Student Contact'),
        ),
        migrations.AddField(
            model_name='student',
            name='family_access_users',
            field=models.ManyToManyField(blank=True, related_name='_student_family_access_users_+', to='sis.FamilyAccessUser'),
        ),
        migrations.AddField(
            model_name='student',
            name='family_preferred_language',
            field=models.ForeignKey(blank=True, default=sis.models.get_default_language, null=True, on_delete=django.db.models.deletion.CASCADE, to='sis.LanguageChoice'),
        ),
        migrations.AddField(
            model_name='student',
            name='reason_left',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='sis.ReasonLeft'),
        ),
        migrations.AddField(
            model_name='student',
            name='siblings',
            field=models.ManyToManyField(blank=True, to='sis.Student'),
        ),
        migrations.AddField(
            model_name='student',
            name='year',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='sis.GradeLevel', verbose_name='Grade level'),
        ),
        migrations.AddField(
            model_name='cohort',
            name='students',
            field=models.ManyToManyField(blank=True, through='sis.StudentCohort', to='sis.Student'),
        ),
        migrations.AlterUniqueTogether(
            name='gradescalerule',
            unique_together=set([('min_grade', 'max_grade', 'grade_scale')]),
        ),
    ]
