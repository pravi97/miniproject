# -*- coding: utf-8 -*-
# Generated by Django 1.10 on 2017-05-05 22:31
from __future__ import unicode_literals

import datetime
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('sis', '0007_percoursesectioncohort'),
        ('benchmarks', '0001_initial'),
        ('schedule', '0006_award_awardstudent_omitcoursegpa_omityeargpa'),
    ]

    operations = [
        migrations.CreateModel(
            name='Aggregate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('manual_mark', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('cached_value', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('cached_substitution', models.CharField(blank=True, max_length=16, null=True)),
                ('points_possible', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='AggregateTask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_id', models.CharField(max_length=36)),
                ('timestamp', models.DateTimeField(default=datetime.datetime.now)),
                ('aggregate', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='benchmark_grade.Aggregate')),
            ],
        ),
        migrations.CreateModel(
            name='AssignmentType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='CalculationRule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points_possible', models.DecimalField(decimal_places=2, default=4, max_digits=8)),
                ('decimal_places', models.IntegerField(default=2)),
                ('first_year_effective', models.ForeignKey(help_text='Rule also applies to subsequent years unless a more recent rule exists.', on_delete=django.db.models.deletion.CASCADE, to='sis.SchoolYear')),
            ],
        ),
        migrations.CreateModel(
            name='CalculationRuleCategoryAsCourse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('calculation_rule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='category_as_course_set', to='benchmark_grade.CalculationRule')),
            ],
        ),
        migrations.CreateModel(
            name='CalculationRulePerCourseCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weight', models.DecimalField(decimal_places=4, default=1, max_digits=5)),
                ('apply_to_departments', models.ManyToManyField(blank=True, to='schedule.Department')),
                ('calculation_rule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='per_course_category_set', to='benchmark_grade.CalculationRule')),
            ],
        ),
        migrations.CreateModel(
            name='CalculationRuleSubstitution',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('operator', models.CharField(choices=[('>', 'Greater than'), ('>=', 'Greater than or equal to'), ('<=', 'Less than or equal to'), ('<', 'Less than'), ('!=', 'Not equal to'), ('==', 'Equal to')], max_length=2)),
                ('match_value', models.DecimalField(decimal_places=2, help_text='Use only (0..1) unless category has fixed points possible.', max_digits=8)),
                ('display_as', models.CharField(blank=True, max_length=16, null=True)),
                ('calculate_as', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('flag_visually', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('allow_multiple_demonstrations', models.BooleanField(default=False)),
                ('demonstration_aggregation_method', models.CharField(blank=True, choices=[('Avg', 'Average'), ('Count', 'Count'), ('Max', 'Maximum'), ('Min', 'Minimum'), ('StdDev', 'Standard deviation'), ('Sum', 'Sum'), ('Variance', 'Variance')], max_length=16, null=True)),
                ('display_in_gradebook', models.BooleanField(default=True)),
                ('fixed_points_possible', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('fixed_granularity', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('display_order', models.IntegerField(blank=True, null=True, unique=True)),
                ('display_scale', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('display_symbol', models.CharField(blank=True, max_length=7, null=True)),
            ],
            options={
                'verbose_name_plural': 'categories',
                'ordering': ['display_order'],
            },
        ),
        migrations.CreateModel(
            name='Demonstration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('date', models.DateField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(datetime.date(1970, 1, 1))])),
                ('points_possible', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('multiplier', models.DecimalField(decimal_places=2, default=1, max_digits=8)),
                ('assignment_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='benchmark_grade.AssignmentType')),
                ('benchmark', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='benchmarks.Benchmark', verbose_name='standard')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='benchmark_grade.Category')),
                ('course_section', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='schedule.CourseSection')),
                ('marking_period', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='schedule.MarkingPeriod')),
            ],
        ),
        migrations.CreateModel(
            name='Mark',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mark', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('normalized_mark', models.FloatField(blank=True, null=True)),
                ('letter_grade', models.CharField(blank=True, help_text='Overrides numerical mark.', max_length=3, null=True)),
                ('demonstration', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='benchmark_grade.Demonstration')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='benchmark_grade.Item')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sis.Student')),
            ],
        ),
        migrations.AddField(
            model_name='demonstration',
            name='item',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='benchmark_grade.Item'),
        ),
        migrations.AddField(
            model_name='calculationrulesubstitution',
            name='apply_to_categories',
            field=models.ManyToManyField(blank=True, to='benchmark_grade.Category'),
        ),
        migrations.AddField(
            model_name='calculationrulesubstitution',
            name='apply_to_departments',
            field=models.ManyToManyField(blank=True, to='schedule.Department'),
        ),
        migrations.AddField(
            model_name='calculationrulesubstitution',
            name='calculation_rule',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='substitution_set', to='benchmark_grade.CalculationRule'),
        ),
        migrations.AddField(
            model_name='calculationrulepercoursecategory',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='benchmark_grade.Category'),
        ),
        migrations.AddField(
            model_name='calculationrulecategoryascourse',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='benchmark_grade.Category'),
        ),
        migrations.AddField(
            model_name='calculationrulecategoryascourse',
            name='include_departments',
            field=models.ManyToManyField(blank=True, to='schedule.Department'),
        ),
        migrations.AddField(
            model_name='calculationrulecategoryascourse',
            name='special_course_section',
            field=models.ForeignKey(help_text=' Grades for this course section will be OVERWRITTEN by the\n        category averages! ', on_delete=django.db.models.deletion.CASCADE, to='schedule.CourseSection'),
        ),
        migrations.AddField(
            model_name='aggregate',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='benchmark_grade.Category'),
        ),
        migrations.AddField(
            model_name='aggregate',
            name='course_section',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='schedule.CourseSection'),
        ),
        migrations.AddField(
            model_name='aggregate',
            name='marking_period',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='schedule.MarkingPeriod'),
        ),
        migrations.AddField(
            model_name='aggregate',
            name='student',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='sis.Student'),
        ),
        migrations.AlterUniqueTogether(
            name='mark',
            unique_together=set([('item', 'demonstration', 'student')]),
        ),
        migrations.AlterUniqueTogether(
            name='aggregatetask',
            unique_together=set([('aggregate', 'task_id')]),
        ),
        migrations.AlterUniqueTogether(
            name='aggregate',
            unique_together=set([('student', 'course_section', 'category', 'marking_period')]),
        ),
    ]
