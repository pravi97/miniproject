# -*- coding: utf-8 -*-
# Generated by Django 1.10 on 2017-05-05 21:46
from __future__ import unicode_literals

import ckeditor.fields
import custom_field.custom_field
import datetime
from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import sis.helper_functions
import work_study.models


class Migration(migrations.Migration):

    dependencies = [
        ('sis', '0007_percoursesectioncohort'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('work_study', '0006_auto_20170505_2143'),
    ]

    operations = [
        migrations.CreateModel(
            name='Attendance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('absence_date', models.DateField(default=datetime.datetime.now, validators=[django.core.validators.MinValueValidator(datetime.date(1970, 1, 1))], verbose_name='date')),
                ('tardy', models.CharField(choices=[('P', 'Present'), ('A', 'Absent/Half Day'), ('T', 'Tardy'), ('N', 'No Timesheet')], default='P', max_length=1, verbose_name='Status')),
                ('tardy_time_in', models.TimeField(blank=True, null=True)),
                ('makeup_date', models.DateField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(datetime.date(1970, 1, 1))])),
                ('paid', models.DecimalField(blank=True, decimal_places=2, help_text='Dollar value student has paid school for a fee.', max_digits=5, null=True)),
                ('billed', models.BooleanField(default=False, help_text='Has the student been billed for this day?')),
                ('half_day', models.BooleanField(default=False, help_text='Missed only half day.')),
                ('waive', models.BooleanField(default=False, help_text='Does not need to make up day at work.')),
                ('notes', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'verbose_name_plural': 'Attendance',
            },
        ),
        migrations.CreateModel(
            name='AttendanceFee',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('value', models.IntegerField(help_text='Dollar value of attendance fee')),
            ],
            options={
                'verbose_name_plural': 'Attendances: Fees',
            },
        ),
        migrations.CreateModel(
            name='AttendanceReason',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name_plural': 'Attendances: Reason',
            },
        ),
        migrations.CreateModel(
            name='ClientVisit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dol', models.BooleanField(default=False)),
                ('date', models.DateField(default=datetime.datetime.now, validators=[django.core.validators.MinValueValidator(datetime.date(1970, 1, 1))])),
                ('attendance_and_punctuality', models.CharField(blank=True, choices=[('4', 'Above and beyond'), ('3', 'Represents high level of proficiency'), ('2', 'On the way with some help'), ('1', 'Needs immediate intervention')], max_length=1)),
                ('attitude_and_motivation', models.CharField(blank=True, choices=[('4', 'Above and beyond'), ('3', 'Represents high level of proficiency'), ('2', 'On the way with some help'), ('1', 'Needs immediate intervention')], max_length=1)),
                ('productivity_and_time_management', models.CharField(blank=True, choices=[('4', 'Above and beyond'), ('3', 'Represents high level of proficiency'), ('2', 'On the way with some help'), ('1', 'Needs immediate intervention')], max_length=1)),
                ('ability_to_learn_new_tasks', models.CharField(blank=True, choices=[('4', 'Above and beyond'), ('3', 'Represents high level of proficiency'), ('2', 'On the way with some help'), ('1', 'Needs immediate intervention')], max_length=1)),
                ('professional_appearance', models.CharField(blank=True, choices=[('4', 'Above and beyond'), ('3', 'Represents high level of proficiency'), ('2', 'On the way with some help'), ('1', 'Needs immediate intervention')], max_length=1)),
                ('interaction_with_coworkers', models.CharField(blank=True, choices=[('4', 'Above and beyond'), ('3', 'Represents high level of proficiency'), ('2', 'On the way with some help'), ('1', 'Needs immediate intervention')], max_length=1)),
                ('initiative_and_self_direction', models.CharField(blank=True, choices=[('4', 'Above and beyond'), ('3', 'Represents high level of proficiency'), ('2', 'On the way with some help'), ('1', 'Needs immediate intervention')], max_length=1)),
                ('accuracy_and_attention_to_detail', models.CharField(blank=True, choices=[('4', 'Above and beyond'), ('3', 'Represents high level of proficiency'), ('2', 'On the way with some help'), ('1', 'Needs immediate intervention')], max_length=1)),
                ('organizational_skills', models.CharField(blank=True, choices=[('4', 'Above and beyond'), ('3', 'Represents high level of proficiency'), ('2', 'On the way with some help'), ('1', 'Needs immediate intervention')], max_length=1)),
                ('observations', models.TextField(blank=True)),
                ('supervisor_comments', models.TextField(blank=True)),
                ('student_comments', models.TextField(blank=True)),
                ('job_description', models.TextField(blank=True)),
                ('work_environment', models.CharField(blank=True, choices=[('C', 'Safe / Compliant'), ('N', 'Not Compliant')], max_length=1)),
                ('notify_mentors', models.BooleanField(default=False, help_text='E-mail this report to all those in the mentors group.')),
                ('notes', models.TextField(blank=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='work_study.WorkTeam')),
                ('cra', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='work_study.CraContact')),
                ('follow_up_of', models.ForeignKey(blank=True, help_text='This report is a follow-up of selected report.', null=True, on_delete=django.db.models.deletion.CASCADE, to='work_study.ClientVisit')),
            ],
        ),
        migrations.CreateModel(
            name='CompanyHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=datetime.datetime.now, validators=[django.core.validators.MinValueValidator(datetime.date(1970, 1, 1))])),
                ('fired', models.BooleanField(default=False)),
                ('placement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='work_study.WorkTeam')),
            ],
            options={
                'ordering': ('-date',),
                'verbose_name_plural': 'Companies: History',
            },
        ),
        migrations.CreateModel(
            name='CompContract',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_name', models.CharField(blank=True, max_length=255)),
                ('name', models.CharField(blank=True, max_length=255)),
                ('title', models.CharField(blank=True, max_length=255)),
                ('date', models.DateField(default=datetime.datetime.now, validators=[django.core.validators.MinValueValidator(datetime.date(1970, 1, 1))])),
                ('number_students', models.IntegerField(blank=True, null=True)),
                ('student_functional_responsibilities_other', models.TextField(blank=True)),
                ('student_desired_skills_other', models.TextField(blank=True)),
                ('student_leave', models.BooleanField(default=False)),
                ('student_leave_lunch', models.BooleanField(default=False, verbose_name='Student leaves for lunch.')),
                ('student_leave_errands', models.BooleanField(default=False, verbose_name='Student leaves for errands.')),
                ('student_leave_other', models.TextField(blank=True)),
                ('signed', models.BooleanField(default=False)),
                ('contract_file', models.FileField(blank=True, upload_to='contracts')),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address when signed', null=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='work_study.Company')),
            ],
            options={
                'verbose_name': 'Company contract',
            },
            bases=(models.Model, custom_field.custom_field.CustomFieldModel),
        ),
        migrations.CreateModel(
            name='MessageToSupervisor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', ckeditor.fields.RichTextField(help_text='This message will be shown to supervisors upon log in.')),
                ('start_date', models.DateField(default=datetime.date.today, validators=[django.core.validators.MinValueValidator(datetime.date(1970, 1, 1))])),
                ('end_date', models.DateField(default=datetime.date.today, validators=[django.core.validators.MinValueValidator(datetime.date(1970, 1, 1))])),
            ],
        ),
        migrations.CreateModel(
            name='PaymentOption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('details', models.TextField(blank=True)),
                ('cost_per_student', models.DecimalField(decimal_places=2, max_digits=10)),
            ],
        ),
        migrations.CreateModel(
            name='Personality',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=4, unique=True)),
                ('description', models.TextField(blank=True)),
            ],
            options={
                'ordering': ('type',),
                'verbose_name_plural': 'Personality types',
            },
        ),
        migrations.CreateModel(
            name='PresetComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.CharField(max_length=255)),
            ],
            options={
                'ordering': ('comment',),
            },
        ),
        migrations.CreateModel(
            name='StudentDesiredSkill',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='StudentFunctionalResponsibility',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name_plural': 'Student functional responsibilities',
            },
        ),
        migrations.CreateModel(
            name='StudentInteraction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(auto_now_add=True, validators=[django.core.validators.MinValueValidator(datetime.date(1970, 1, 1))])),
                ('type', models.CharField(choices=[('M', 'Mentoring'), ('D', 'Discipline'), ('P', 'Parent'), ('C', 'Company'), ('S', 'Supervisor'), ('O', 'Other')], max_length=1)),
                ('comments', models.TextField(blank=True)),
                ('companies', models.ManyToManyField(blank=True, to='work_study.WorkTeam')),
                ('preset_comment', models.ManyToManyField(blank=True, help_text='Double-click on the comment on the left to add or click (+) to add a new comment.', to='work_study.PresetComment')),
                ('reported_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='StudentWorker',
            fields=[
                ('student_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='sis.Student')),
                ('day', models.CharField(blank=True, choices=[['M', 'Monday'], ['T', 'Tuesday'], ['W', 'Wednesday'], ['TH', 'Thursday'], ['F', 'Friday']], max_length=2, null=True, verbose_name='Working day')),
                ('transport_exception', models.CharField(blank=True, choices=[('AM', 'No AM'), ('PM', 'No PM'), ('NO', 'None')], max_length=2)),
                ('work_permit_no', sis.helper_functions.CharNullField(blank=True, max_length=10, null=True, unique=True)),
                ('school_pay_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('student_pay_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('adp_number', models.CharField(blank=True, max_length=5, verbose_name='ADP Number')),
            ],
            options={
                'ordering': ('is_active', 'last_name', 'first_name'),
            },
            bases=('sis.student',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='StudentWorkerRoute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Survey',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('survey', models.CharField(help_text='Title of survey, ex. MP2 2010', max_length=255)),
                ('question', models.CharField(max_length=255)),
                ('answer', models.CharField(blank=True, max_length=510)),
                ('date', models.DateField(default=datetime.datetime.now, validators=[django.core.validators.MinValueValidator(datetime.date(1970, 1, 1))])),
                ('company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='work_study.WorkTeam')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='work_study.StudentWorker')),
            ],
            options={
                'ordering': ('survey', 'student', 'question'),
            },
        ),
        migrations.CreateModel(
            name='TimeSheet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('for_pay', models.BooleanField(default=False, help_text='Student is working over break and will be paid separately for this work.')),
                ('make_up', models.BooleanField(default=False, help_text='Student is making up a missed day.', verbose_name='makeup')),
                ('creation_date', models.DateTimeField(auto_now_add=True, validators=[django.core.validators.MinValueValidator(datetime.date(1970, 1, 1))])),
                ('date', models.DateField(validators=[django.core.validators.MinValueValidator(datetime.date(1970, 1, 1))])),
                ('time_in', models.TimeField()),
                ('time_lunch', models.TimeField()),
                ('time_lunch_return', models.TimeField()),
                ('time_out', models.TimeField()),
                ('hours', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True)),
                ('school_pay_rate', models.DecimalField(blank=True, decimal_places=2, help_text='Per hour pay rate the school is receiving from a company.', max_digits=5, null=True)),
                ('student_pay_rate', models.DecimalField(blank=True, decimal_places=2, help_text='Per hour pay rate the student is actually receiving.', max_digits=5, null=True)),
                ('school_net', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('student_net', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('approved', models.BooleanField(default=False, verbose_name='approve')),
                ('student_accomplishment', models.TextField(blank=True)),
                ('supervisor_comment', models.TextField(blank=True)),
                ('show_student_comments', models.BooleanField(default=True)),
                ('supervisor_key', models.CharField(blank=True, max_length=20)),
                ('cra_email_sent', models.BooleanField(default=False, editable=False, help_text='This time sheet was sent to a CRA via nightly e-mail.')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='work_study.WorkTeam')),
            ],
        ),
        migrations.CreateModel(
            name='TimeSheetPerformanceChoice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('rank', models.IntegerField(default=work_study.models.get_next_rank, help_text='Must be unique. Convention is that higher numbers are better.', unique=True)),
            ],
            options={
                'ordering': ('rank',),
            },
        ),
        migrations.AddField(
            model_name='timesheet',
            name='performance',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='work_study.TimeSheetPerformanceChoice'),
        ),
        migrations.AddField(
            model_name='timesheet',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='work_study.StudentWorker'),
        ),
        migrations.AddField(
            model_name='studentworker',
            name='am_route',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='am_student_set', to='work_study.StudentWorkerRoute'),
        ),
        migrations.AddField(
            model_name='studentworker',
            name='personality_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='work_study.Personality'),
        ),
        migrations.AddField(
            model_name='studentworker',
            name='placement',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='work_study.WorkTeam'),
        ),
        migrations.AddField(
            model_name='studentworker',
            name='pm_route',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pm_student_set', to='work_study.StudentWorkerRoute'),
        ),
        migrations.AddField(
            model_name='studentworker',
            name='primary_contact',
            field=models.ForeignKey(blank=True, help_text='This is the primary supervisor to whom e-mails will be sent. If the desired contact is not showing, they may need to be added to the company. New contacts are not automatically assigned to a company unless the supervisor adds them.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='work_study.Contact'),
        ),
        migrations.AddField(
            model_name='studentinteraction',
            name='student',
            field=models.ManyToManyField(blank=True, help_text='An e-mail will automatically be sent to the CRA of this student if type is mentoring.', related_name='student_interaction_set', to='work_study.StudentWorker'),
        ),
        migrations.AddField(
            model_name='compcontract',
            name='payment',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='work_study.PaymentOption'),
        ),
        migrations.AddField(
            model_name='compcontract',
            name='school_year',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='sis.SchoolYear'),
        ),
        migrations.AddField(
            model_name='compcontract',
            name='student_desired_skills',
            field=models.ManyToManyField(blank=True, to='work_study.StudentDesiredSkill'),
        ),
        migrations.AddField(
            model_name='compcontract',
            name='student_functional_responsibilities',
            field=models.ManyToManyField(blank=True, to='work_study.StudentFunctionalResponsibility'),
        ),
        migrations.AddField(
            model_name='companyhistory',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='work_study.StudentWorker'),
        ),
        migrations.AddField(
            model_name='clientvisit',
            name='student_worker',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='work_study.StudentWorker'),
        ),
        migrations.AddField(
            model_name='clientvisit',
            name='supervisor',
            field=models.ManyToManyField(blank=True, to='work_study.Contact'),
        ),
        migrations.AddField(
            model_name='attendance',
            name='fee',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='work_study.AttendanceFee'),
        ),
        migrations.AddField(
            model_name='attendance',
            name='reason',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='work_study.AttendanceReason'),
        ),
        migrations.AddField(
            model_name='attendance',
            name='student',
            field=models.ForeignKey(help_text='Student who was absent this day.', on_delete=django.db.models.deletion.CASCADE, to='work_study.StudentWorker'),
        ),
        migrations.AlterUniqueTogether(
            name='companyhistory',
            unique_together=set([('student', 'placement', 'date')]),
        ),
        migrations.AlterUniqueTogether(
            name='attendance',
            unique_together=set([('student', 'absence_date')]),
        ),
    ]
